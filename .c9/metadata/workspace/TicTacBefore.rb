{"changed":true,"filter":false,"title":"TicTacBefore.rb","tooltip":"/TicTacBefore.rb","value":"\nrequire 'pry'\n#tic-tac-toe!\nclaimed_squares = [\"_\", \"_\", \"_\", \"_\", \"_\", \"_\", \"_\", \"_\", \"_\"]\npositions = [0, 1, 2, 3, 4, 5, 6, 7, 8]\n\n\n \ndef board(claimed_squares)\n  puts \"    |    |    \"\n  puts \" #{claimed_squares[0]}  | #{claimed_squares[1]}  | #{claimed_squares[2]} \"\n  puts \"____|____|____\"\n  puts \"    |    |    \" \n  puts \" #{claimed_squares[3]}  | #{claimed_squares[4]}  | #{claimed_squares[5]}  \"\n  puts \"____|____|____\"\n  puts \"    |    |    \"\n  puts \" #{claimed_squares[6]}  | #{claimed_squares[7]}  | #{claimed_squares[8]}  \"\n  puts \"    |    |    \"\nend\n\n\ndef is_tie?(positions)\n  if positions.empty?\n    puts \"Its a stalemate!\"\n    return true\n  elsif positions.any?\n    return false\n  end\nend\n\n\n def check_for_winner?(claimed_squares)\n   three_in_a_row = [[claimed_squares[0], claimed_squares[1], claimed_squares[2]],\n                     [claimed_squares[2], claimed_squares[5], claimed_squares[8]],\n                     [claimed_squares[6], claimed_squares[7], claimed_squares[8]],\n                     [claimed_squares[0], claimed_squares[3], claimed_squares[6]],\n                     [claimed_squares[0], claimed_squares[4], claimed_squares[8]],\n                     [claimed_squares[2], claimed_squares[4], claimed_squares[6]],\n                     [claimed_squares[1], claimed_squares[4], claimed_squares[7]],\n                     [claimed_squares[3], claimed_squares[4], claimed_squares[5]]]\n    if three_in_a_row.include?([\"x\", \"x\", \"x\"])\n      puts \"3 in a row! You win!\"\n      return true\n    elsif three_in_a_row.include?([\"o\", \"o\", \"o\"])\n      puts \"3 in a row! You lose!\"\n      return true\n    else\n      return false\n    end\n  end\n  \n  def check_for_resolution?(claimed_squares, positions)\n    if check_for_winner?(claimed_squares) || is_tie?(positions)\n      board(claimed_squares)\n      return true\n    else\n      return false\n    end\n  end\n\ndef choose_a_square\n  square_to_claim = gets.chomp.to_i\n  square_to_claim -= 1\nend\n\nputs \"Lets play tic-tac-toe!\"\n\nloop do \n \n  board(claimed_squares)\n  \n  begin\n    puts \"Please choose an empty square using [1-9]\"\n    player_square = choose_a_square\n  end until positions.include?(player_square)\n  \n  player_square = positions.shuffle!.delete(player_square)\n  claimed_squares[player_square] = 'x'\n  \n  break if check_for_resolution?(claimed_squares, positions)\n \n  computer_square = positions.pop\n  claimed_squares[computer_square] = 'o'\n  \n  break if check_for_resolution?(claimed_squares, positions)\n \n  \n  \nend","undoManager":{"mark":-1,"position":0,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":88,"column":3},"action":"insert","lines":["","require 'pry'","#tic-tac-toe!","claimed_squares = [\"_\", \"_\", \"_\", \"_\", \"_\", \"_\", \"_\", \"_\", \"_\"]","positions = [0, 1, 2, 3, 4, 5, 6, 7, 8]","",""," ","def board(claimed_squares)","  puts \"    |    |    \"","  puts \" #{claimed_squares[0]}  | #{claimed_squares[1]}  | #{claimed_squares[2]} \"","  puts \"____|____|____\"","  puts \"    |    |    \" ","  puts \" #{claimed_squares[3]}  | #{claimed_squares[4]}  | #{claimed_squares[5]}  \"","  puts \"____|____|____\"","  puts \"    |    |    \"","  puts \" #{claimed_squares[6]}  | #{claimed_squares[7]}  | #{claimed_squares[8]}  \"","  puts \"    |    |    \"","end","","","def is_tie?(positions)","  if positions.empty?","    puts \"Its a stalemate!\"","    return true","  elsif positions.any?","    return false","  end","end","",""," def check_for_winner?(claimed_squares)","   three_in_a_row = [[claimed_squares[0], claimed_squares[1], claimed_squares[2]],","                     [claimed_squares[2], claimed_squares[5], claimed_squares[8]],","                     [claimed_squares[6], claimed_squares[7], claimed_squares[8]],","                     [claimed_squares[0], claimed_squares[3], claimed_squares[6]],","                     [claimed_squares[0], claimed_squares[4], claimed_squares[8]],","                     [claimed_squares[2], claimed_squares[4], claimed_squares[6]],","                     [claimed_squares[1], claimed_squares[4], claimed_squares[7]],","                     [claimed_squares[3], claimed_squares[4], claimed_squares[5]]]","    if three_in_a_row.include?([\"x\", \"x\", \"x\"])","      puts \"3 in a row! You win!\"","      return true","    elsif three_in_a_row.include?([\"o\", \"o\", \"o\"])","      puts \"3 in a row! You lose!\"","      return true","    else","      return false","    end","  end","  ","  def check_for_resolution?(claimed_squares, positions)","    if check_for_winner?(claimed_squares) || is_tie?(positions)","      board(claimed_squares)","      return true","    else","      return false","    end","  end","","def choose_a_square","  square_to_claim = gets.chomp.to_i","  square_to_claim -= 1","end","","puts \"Lets play tic-tac-toe!\"","","loop do "," ","  board(claimed_squares)","  ","  begin","    puts \"Please choose an empty square using [1-9]\"","    player_square = choose_a_square","  end until positions.include?(player_square)","  ","  player_square = positions.shuffle!.delete(player_square)","  claimed_squares[player_square] = 'x'","  ","  break if check_for_resolution?(claimed_squares, positions)"," ","  computer_square = positions.pop","  claimed_squares[computer_square] = 'o'","  ","  break if check_for_resolution?(claimed_squares, positions)"," ","  ","  ","end"]}]}]]},"ace":{"folds":[],"scrolltop":750,"scrollleft":0,"selection":{"start":{"row":88,"column":3},"end":{"row":88,"column":3},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":42,"state":"start","mode":"ace/mode/ruby"}},"timestamp":1418595274761}